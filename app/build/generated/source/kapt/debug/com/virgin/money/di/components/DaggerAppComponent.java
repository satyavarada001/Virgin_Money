// Generated by Dagger (https://dagger.dev).
package com.virgin.money.di.components;

import androidx.fragment.app.Fragment;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;
import com.virgin.money.application.VirginMoneyApp;
import com.virgin.money.data.api.HttpLogger_Factory;
import com.virgin.money.data.api.VirginMoneyApi;
import com.virgin.money.data.models.People;
import com.virgin.money.data.models.Room;
import com.virgin.money.data.states.Result;
import com.virgin.money.data.usecases.PeopleUseCase;
import com.virgin.money.data.usecases.PeopleUseCase_Factory;
import com.virgin.money.data.usecases.RoomUseCase;
import com.virgin.money.data.usecases.RoomUseCase_Factory;
import com.virgin.money.di.factory.FragmentInjectionFactory;
import com.virgin.money.di.factory.ViewModelFactory;
import com.virgin.money.di.factory.ViewModelFactory_Factory;
import com.virgin.money.di.modules.ActivityModule_ContributeHomeActivity;
import com.virgin.money.di.modules.DataModule;
import com.virgin.money.di.modules.DataModule_ProvideBooleanMutableLiveDataFactory;
import com.virgin.money.di.modules.DataModule_ProvideIntegerMutableLiveDataFactory;
import com.virgin.money.di.modules.DataModule_ProvidePeopleListMutableLiveDataFactory;
import com.virgin.money.di.modules.DataModule_ProvidePeopleMutableLiveDataFactory;
import com.virgin.money.di.modules.DataModule_ProvideRoomListMutableLiveDataFactory;
import com.virgin.money.di.modules.MainModule_ContributeDashboardFragment;
import com.virgin.money.di.modules.MainModule_ContributeHomeFragment;
import com.virgin.money.di.modules.MainModule_ContributeNotificationsFragment;
import com.virgin.money.di.modules.VirginMoneyApiModule;
import com.virgin.money.di.modules.VirginMoneyApiModule_ProvideBaseUrlFactory;
import com.virgin.money.di.modules.VirginMoneyApiModule_ProvideHttpLoggingInterceptorFactory;
import com.virgin.money.di.modules.VirginMoneyApiModule_ProvideOkHttpClientFactory;
import com.virgin.money.di.modules.VirginMoneyApiModule_ProvideRetrofitBuilderFactory;
import com.virgin.money.di.modules.VirginMoneyApiModule_ProvideRetrofitClientFactory;
import com.virgin.money.di.modules.VirginMoneyApiModule_ProvideVirginMoneyApiFactory;
import com.virgin.money.ui.base.BaseActivity_MembersInjector;
import com.virgin.money.ui.main.MainActivity;
import com.virgin.money.ui.people.PeopleDetailsFragment;
import com.virgin.money.ui.people.PeopleDetailsFragment_Factory;
import com.virgin.money.ui.people.PeopleFragment;
import com.virgin.money.ui.people.PeopleFragment_Factory;
import com.virgin.money.ui.people.PeopleViewModel;
import com.virgin.money.ui.people.PeopleViewModel_Factory;
import com.virgin.money.ui.room.RoomFragment;
import com.virgin.money.ui.room.RoomFragment_Factory;
import com.virgin.money.ui.room.RoomViewModel;
import com.virgin.money.ui.room.RoomViewModel_Factory;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent {
  private DaggerAppComponent() {
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(VirginMoneyApp arg0) {
      Preconditions.checkNotNull(arg0);
      return new AppComponentImpl(new VirginMoneyApiModule(), new DataModule(), arg0);
    }
  }

  private static final class MainActivitySubcomponentFactory implements ActivityModule_ContributeHomeActivity.MainActivitySubcomponent.Factory {
    private final AppComponentImpl appComponentImpl;

    private MainActivitySubcomponentFactory(AppComponentImpl appComponentImpl) {
      this.appComponentImpl = appComponentImpl;
    }

    @Override
    public ActivityModule_ContributeHomeActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(appComponentImpl, arg0);
    }
  }

  private static final class PeopleFragmentSubcomponentFactory implements MainModule_ContributeHomeFragment.PeopleFragmentSubcomponent.Factory {
    private final AppComponentImpl appComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private PeopleFragmentSubcomponentFactory(AppComponentImpl appComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl) {
      this.appComponentImpl = appComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;
    }

    @Override
    public MainModule_ContributeHomeFragment.PeopleFragmentSubcomponent create(
        PeopleFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new PeopleFragmentSubcomponentImpl(appComponentImpl, mainActivitySubcomponentImpl, arg0);
    }
  }

  private static final class RoomFragmentSubcomponentFactory implements MainModule_ContributeDashboardFragment.RoomFragmentSubcomponent.Factory {
    private final AppComponentImpl appComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private RoomFragmentSubcomponentFactory(AppComponentImpl appComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl) {
      this.appComponentImpl = appComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;
    }

    @Override
    public MainModule_ContributeDashboardFragment.RoomFragmentSubcomponent create(
        RoomFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new RoomFragmentSubcomponentImpl(appComponentImpl, mainActivitySubcomponentImpl, arg0);
    }
  }

  private static final class PeopleDetailsFragmentSubcomponentFactory implements MainModule_ContributeNotificationsFragment.PeopleDetailsFragmentSubcomponent.Factory {
    private final AppComponentImpl appComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private PeopleDetailsFragmentSubcomponentFactory(AppComponentImpl appComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl) {
      this.appComponentImpl = appComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;
    }

    @Override
    public MainModule_ContributeNotificationsFragment.PeopleDetailsFragmentSubcomponent create(
        PeopleDetailsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new PeopleDetailsFragmentSubcomponentImpl(appComponentImpl, mainActivitySubcomponentImpl, arg0);
    }
  }

  private static final class PeopleFragmentSubcomponentImpl implements MainModule_ContributeHomeFragment.PeopleFragmentSubcomponent {
    private final AppComponentImpl appComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private final PeopleFragmentSubcomponentImpl peopleFragmentSubcomponentImpl = this;

    private PeopleFragmentSubcomponentImpl(AppComponentImpl appComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl, PeopleFragment arg0Param) {
      this.appComponentImpl = appComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;


    }

    @Override
    public void inject(PeopleFragment arg0) {
    }
  }

  private static final class RoomFragmentSubcomponentImpl implements MainModule_ContributeDashboardFragment.RoomFragmentSubcomponent {
    private final AppComponentImpl appComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private final RoomFragmentSubcomponentImpl roomFragmentSubcomponentImpl = this;

    private RoomFragmentSubcomponentImpl(AppComponentImpl appComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl, RoomFragment arg0Param) {
      this.appComponentImpl = appComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;


    }

    @Override
    public void inject(RoomFragment arg0) {
    }
  }

  private static final class PeopleDetailsFragmentSubcomponentImpl implements MainModule_ContributeNotificationsFragment.PeopleDetailsFragmentSubcomponent {
    private final AppComponentImpl appComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl;

    private final PeopleDetailsFragmentSubcomponentImpl peopleDetailsFragmentSubcomponentImpl = this;

    private PeopleDetailsFragmentSubcomponentImpl(AppComponentImpl appComponentImpl,
        MainActivitySubcomponentImpl mainActivitySubcomponentImpl,
        PeopleDetailsFragment arg0Param) {
      this.appComponentImpl = appComponentImpl;
      this.mainActivitySubcomponentImpl = mainActivitySubcomponentImpl;


    }

    @Override
    public void inject(PeopleDetailsFragment arg0) {
    }
  }

  private static final class MainActivitySubcomponentImpl implements ActivityModule_ContributeHomeActivity.MainActivitySubcomponent {
    private final AppComponentImpl appComponentImpl;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl = this;

    private Provider<PeopleFragment> peopleFragmentProvider;

    private Provider<PeopleDetailsFragment> peopleDetailsFragmentProvider;

    private Provider<RoomFragment> roomFragmentProvider;

    private Provider<MainModule_ContributeHomeFragment.PeopleFragmentSubcomponent.Factory> peopleFragmentSubcomponentFactoryProvider;

    private Provider<MainModule_ContributeDashboardFragment.RoomFragmentSubcomponent.Factory> roomFragmentSubcomponentFactoryProvider;

    private Provider<MainModule_ContributeNotificationsFragment.PeopleDetailsFragmentSubcomponent.Factory> peopleDetailsFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(AppComponentImpl appComponentImpl,
        MainActivity arg0Param) {
      this.appComponentImpl = appComponentImpl;

      initialize(arg0Param);

    }

    private Map<Class<? extends Fragment>, Provider<Fragment>> mapOfClassOfAndProviderOfFragment() {
      return MapBuilder.<Class<? extends Fragment>, Provider<Fragment>>newMapBuilder(3).put(PeopleFragment.class, ((Provider) peopleFragmentProvider)).put(PeopleDetailsFragment.class, ((Provider) peopleDetailsFragmentProvider)).put(RoomFragment.class, ((Provider) roomFragmentProvider)).build();
    }

    private FragmentInjectionFactory fragmentInjectionFactory() {
      return new FragmentInjectionFactory(mapOfClassOfAndProviderOfFragment());
    }

    private Map<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>>newMapBuilder(4).put(MainActivity.class, ((Provider) appComponentImpl.mainActivitySubcomponentFactoryProvider)).put(PeopleFragment.class, ((Provider) peopleFragmentSubcomponentFactoryProvider)).put(RoomFragment.class, ((Provider) roomFragmentSubcomponentFactoryProvider)).put(PeopleDetailsFragment.class, ((Provider) peopleDetailsFragmentSubcomponentFactoryProvider)).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<dagger.android.AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0Param) {
      this.peopleFragmentProvider = PeopleFragment_Factory.create(((Provider) appComponentImpl.viewModelFactoryProvider));
      this.peopleDetailsFragmentProvider = PeopleDetailsFragment_Factory.create(((Provider) appComponentImpl.viewModelFactoryProvider));
      this.roomFragmentProvider = RoomFragment_Factory.create(((Provider) appComponentImpl.viewModelFactoryProvider));
      this.peopleFragmentSubcomponentFactoryProvider = new Provider<MainModule_ContributeHomeFragment.PeopleFragmentSubcomponent.Factory>() {
        @Override
        public MainModule_ContributeHomeFragment.PeopleFragmentSubcomponent.Factory get() {
          return new PeopleFragmentSubcomponentFactory(appComponentImpl, mainActivitySubcomponentImpl);
        }
      };
      this.roomFragmentSubcomponentFactoryProvider = new Provider<MainModule_ContributeDashboardFragment.RoomFragmentSubcomponent.Factory>() {
        @Override
        public MainModule_ContributeDashboardFragment.RoomFragmentSubcomponent.Factory get() {
          return new RoomFragmentSubcomponentFactory(appComponentImpl, mainActivitySubcomponentImpl);
        }
      };
      this.peopleDetailsFragmentSubcomponentFactoryProvider = new Provider<MainModule_ContributeNotificationsFragment.PeopleDetailsFragmentSubcomponent.Factory>() {
        @Override
        public MainModule_ContributeNotificationsFragment.PeopleDetailsFragmentSubcomponent.Factory get(
            ) {
          return new PeopleDetailsFragmentSubcomponentFactory(appComponentImpl, mainActivitySubcomponentImpl);
        }
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectFragmentFactory(instance, fragmentInjectionFactory());
      BaseActivity_MembersInjector.injectViewModelFactory(instance, appComponentImpl.viewModelFactoryProvider.get());
      BaseActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private static final class AppComponentImpl implements AppComponent {
    private final AppComponentImpl appComponentImpl = this;

    private Provider<ActivityModule_ContributeHomeActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

    private Provider<String> provideBaseUrlProvider;

    private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<Retrofit.Builder> provideRetrofitBuilderProvider;

    private Provider<Retrofit> provideRetrofitClientProvider;

    private Provider<VirginMoneyApi> provideVirginMoneyApiProvider;

    private Provider<RoomUseCase> roomUseCaseProvider;

    private Provider<MutableLiveData<Result<List<Room>>>> provideRoomListMutableLiveDataProvider;

    private Provider<MutableLiveData<Integer>> provideIntegerMutableLiveDataProvider;

    private Provider<MutableLiveData<Boolean>> provideBooleanMutableLiveDataProvider;

    private Provider<RoomViewModel> roomViewModelProvider;

    private Provider<PeopleUseCase> peopleUseCaseProvider;

    private Provider<MutableLiveData<People>> providePeopleMutableLiveDataProvider;

    private Provider<MutableLiveData<Result<List<People>>>> providePeopleListMutableLiveDataProvider;

    private Provider<PeopleViewModel> peopleViewModelProvider;

    private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

    private Provider<ViewModelFactory> viewModelFactoryProvider;

    private AppComponentImpl(VirginMoneyApiModule virginMoneyApiModuleParam,
        DataModule dataModuleParam, VirginMoneyApp arg0Param) {

      initialize(virginMoneyApiModuleParam, dataModuleParam, arg0Param);

    }

    private Map<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return Collections.<Class<?>, Provider<dagger.android.AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, ((Provider) mainActivitySubcomponentFactoryProvider));
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<dagger.android.AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final VirginMoneyApiModule virginMoneyApiModuleParam,
        final DataModule dataModuleParam, final VirginMoneyApp arg0Param) {
      this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeHomeActivity.MainActivitySubcomponent.Factory>() {
        @Override
        public ActivityModule_ContributeHomeActivity.MainActivitySubcomponent.Factory get() {
          return new MainActivitySubcomponentFactory(appComponentImpl);
        }
      };
      this.provideBaseUrlProvider = VirginMoneyApiModule_ProvideBaseUrlFactory.create(virginMoneyApiModuleParam);
      this.provideHttpLoggingInterceptorProvider = VirginMoneyApiModule_ProvideHttpLoggingInterceptorFactory.create(virginMoneyApiModuleParam, ((Provider) HttpLogger_Factory.create()));
      this.provideOkHttpClientProvider = VirginMoneyApiModule_ProvideOkHttpClientFactory.create(virginMoneyApiModuleParam, provideHttpLoggingInterceptorProvider);
      this.provideRetrofitBuilderProvider = VirginMoneyApiModule_ProvideRetrofitBuilderFactory.create(virginMoneyApiModuleParam, provideBaseUrlProvider, provideOkHttpClientProvider);
      this.provideRetrofitClientProvider = VirginMoneyApiModule_ProvideRetrofitClientFactory.create(virginMoneyApiModuleParam, provideRetrofitBuilderProvider);
      this.provideVirginMoneyApiProvider = VirginMoneyApiModule_ProvideVirginMoneyApiFactory.create(virginMoneyApiModuleParam, provideRetrofitClientProvider);
      this.roomUseCaseProvider = RoomUseCase_Factory.create(provideVirginMoneyApiProvider);
      this.provideRoomListMutableLiveDataProvider = DataModule_ProvideRoomListMutableLiveDataFactory.create(dataModuleParam);
      this.provideIntegerMutableLiveDataProvider = DataModule_ProvideIntegerMutableLiveDataFactory.create(dataModuleParam);
      this.provideBooleanMutableLiveDataProvider = DataModule_ProvideBooleanMutableLiveDataFactory.create(dataModuleParam);
      this.roomViewModelProvider = RoomViewModel_Factory.create(roomUseCaseProvider, provideRoomListMutableLiveDataProvider, provideIntegerMutableLiveDataProvider, provideBooleanMutableLiveDataProvider);
      this.peopleUseCaseProvider = PeopleUseCase_Factory.create(provideVirginMoneyApiProvider);
      this.providePeopleMutableLiveDataProvider = DataModule_ProvidePeopleMutableLiveDataFactory.create(dataModuleParam);
      this.providePeopleListMutableLiveDataProvider = DataModule_ProvidePeopleListMutableLiveDataFactory.create(dataModuleParam);
      this.peopleViewModelProvider = PeopleViewModel_Factory.create(peopleUseCaseProvider, providePeopleMutableLiveDataProvider, providePeopleListMutableLiveDataProvider, provideIntegerMutableLiveDataProvider, provideBooleanMutableLiveDataProvider);
      this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2).put(RoomViewModel.class, ((Provider) roomViewModelProvider)).put(PeopleViewModel.class, ((Provider) peopleViewModelProvider)).build();
      this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
    }

    @Override
    public void inject(VirginMoneyApp arg0) {
      injectVirginMoneyApp(arg0);
    }

    private VirginMoneyApp injectVirginMoneyApp(VirginMoneyApp instance) {
      DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }
}
