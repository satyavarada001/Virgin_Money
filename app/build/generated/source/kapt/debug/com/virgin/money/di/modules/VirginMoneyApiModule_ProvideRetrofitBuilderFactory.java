// Generated by Dagger (https://dagger.dev).
package com.virgin.money.di.modules;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata
@QualifierMetadata("javax.inject.Named")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VirginMoneyApiModule_ProvideRetrofitBuilderFactory implements Factory<Retrofit.Builder> {
  private final VirginMoneyApiModule module;

  private final Provider<String> baseUrlProvider;

  private final Provider<OkHttpClient> mOkHttpClientProvider;

  public VirginMoneyApiModule_ProvideRetrofitBuilderFactory(VirginMoneyApiModule module,
      Provider<String> baseUrlProvider, Provider<OkHttpClient> mOkHttpClientProvider) {
    this.module = module;
    this.baseUrlProvider = baseUrlProvider;
    this.mOkHttpClientProvider = mOkHttpClientProvider;
  }

  @Override
  public Retrofit.Builder get() {
    return provideRetrofitBuilder(module, baseUrlProvider.get(), mOkHttpClientProvider.get());
  }

  public static VirginMoneyApiModule_ProvideRetrofitBuilderFactory create(
      VirginMoneyApiModule module, Provider<String> baseUrlProvider,
      Provider<OkHttpClient> mOkHttpClientProvider) {
    return new VirginMoneyApiModule_ProvideRetrofitBuilderFactory(module, baseUrlProvider, mOkHttpClientProvider);
  }

  public static Retrofit.Builder provideRetrofitBuilder(VirginMoneyApiModule instance,
      String baseUrl, OkHttpClient mOkHttpClient) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofitBuilder(baseUrl, mOkHttpClient));
  }
}
