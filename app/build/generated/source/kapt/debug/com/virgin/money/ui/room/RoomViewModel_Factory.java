// Generated by Dagger (https://dagger.dev).
package com.virgin.money.ui.room;

import androidx.lifecycle.MutableLiveData;
import com.virgin.money.data.models.Room;
import com.virgin.money.data.states.Result;
import com.virgin.money.data.usecases.RoomUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import java.util.List;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoomViewModel_Factory implements Factory<RoomViewModel> {
  private final Provider<RoomUseCase> roomUseCaseProvider;

  private final Provider<MutableLiveData<Result<List<Room>>>> roomsProvider;

  private final Provider<MutableLiveData<Integer>> loadingVisibilityProvider;

  private final Provider<MutableLiveData<Boolean>> errorProvider;

  public RoomViewModel_Factory(Provider<RoomUseCase> roomUseCaseProvider,
      Provider<MutableLiveData<Result<List<Room>>>> roomsProvider,
      Provider<MutableLiveData<Integer>> loadingVisibilityProvider,
      Provider<MutableLiveData<Boolean>> errorProvider) {
    this.roomUseCaseProvider = roomUseCaseProvider;
    this.roomsProvider = roomsProvider;
    this.loadingVisibilityProvider = loadingVisibilityProvider;
    this.errorProvider = errorProvider;
  }

  @Override
  public RoomViewModel get() {
    RoomViewModel instance = newInstance(roomUseCaseProvider.get());
    RoomViewModel_MembersInjector.injectRooms(instance, roomsProvider.get());
    RoomViewModel_MembersInjector.injectLoadingVisibility(instance, loadingVisibilityProvider.get());
    RoomViewModel_MembersInjector.injectError(instance, errorProvider.get());
    return instance;
  }

  public static RoomViewModel_Factory create(Provider<RoomUseCase> roomUseCaseProvider,
      Provider<MutableLiveData<Result<List<Room>>>> roomsProvider,
      Provider<MutableLiveData<Integer>> loadingVisibilityProvider,
      Provider<MutableLiveData<Boolean>> errorProvider) {
    return new RoomViewModel_Factory(roomUseCaseProvider, roomsProvider, loadingVisibilityProvider, errorProvider);
  }

  public static RoomViewModel newInstance(RoomUseCase roomUseCase) {
    return new RoomViewModel(roomUseCase);
  }
}
