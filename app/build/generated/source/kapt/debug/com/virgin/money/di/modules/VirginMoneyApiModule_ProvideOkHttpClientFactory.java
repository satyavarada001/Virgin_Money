// Generated by Dagger (https://dagger.dev).
package com.virgin.money.di.modules;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VirginMoneyApiModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final VirginMoneyApiModule module;

  private final Provider<HttpLoggingInterceptor> logInterceptorProvider;

  public VirginMoneyApiModule_ProvideOkHttpClientFactory(VirginMoneyApiModule module,
      Provider<HttpLoggingInterceptor> logInterceptorProvider) {
    this.module = module;
    this.logInterceptorProvider = logInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, logInterceptorProvider.get());
  }

  public static VirginMoneyApiModule_ProvideOkHttpClientFactory create(VirginMoneyApiModule module,
      Provider<HttpLoggingInterceptor> logInterceptorProvider) {
    return new VirginMoneyApiModule_ProvideOkHttpClientFactory(module, logInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(VirginMoneyApiModule instance,
      HttpLoggingInterceptor logInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttpClient(logInterceptor));
  }
}
