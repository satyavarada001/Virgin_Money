// Generated by Dagger (https://dagger.dev).
package com.virgin.money.ui.people;

import androidx.lifecycle.MutableLiveData;
import com.virgin.money.data.models.People;
import com.virgin.money.data.states.Result;
import com.virgin.money.data.usecases.PeopleUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import java.util.List;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PeopleViewModel_Factory implements Factory<PeopleViewModel> {
  private final Provider<PeopleUseCase> peopleUseCaseProvider;

  private final Provider<MutableLiveData<People>> peopleProvider;

  private final Provider<MutableLiveData<Result<List<People>>>> peoplesProvider;

  private final Provider<MutableLiveData<Integer>> loadingVisibilityProvider;

  private final Provider<MutableLiveData<Boolean>> errorProvider;

  public PeopleViewModel_Factory(Provider<PeopleUseCase> peopleUseCaseProvider,
      Provider<MutableLiveData<People>> peopleProvider,
      Provider<MutableLiveData<Result<List<People>>>> peoplesProvider,
      Provider<MutableLiveData<Integer>> loadingVisibilityProvider,
      Provider<MutableLiveData<Boolean>> errorProvider) {
    this.peopleUseCaseProvider = peopleUseCaseProvider;
    this.peopleProvider = peopleProvider;
    this.peoplesProvider = peoplesProvider;
    this.loadingVisibilityProvider = loadingVisibilityProvider;
    this.errorProvider = errorProvider;
  }

  @Override
  public PeopleViewModel get() {
    PeopleViewModel instance = newInstance(peopleUseCaseProvider.get());
    PeopleViewModel_MembersInjector.injectPeople(instance, peopleProvider.get());
    PeopleViewModel_MembersInjector.injectPeoples(instance, peoplesProvider.get());
    PeopleViewModel_MembersInjector.injectLoadingVisibility(instance, loadingVisibilityProvider.get());
    PeopleViewModel_MembersInjector.injectError(instance, errorProvider.get());
    return instance;
  }

  public static PeopleViewModel_Factory create(Provider<PeopleUseCase> peopleUseCaseProvider,
      Provider<MutableLiveData<People>> peopleProvider,
      Provider<MutableLiveData<Result<List<People>>>> peoplesProvider,
      Provider<MutableLiveData<Integer>> loadingVisibilityProvider,
      Provider<MutableLiveData<Boolean>> errorProvider) {
    return new PeopleViewModel_Factory(peopleUseCaseProvider, peopleProvider, peoplesProvider, loadingVisibilityProvider, errorProvider);
  }

  public static PeopleViewModel newInstance(PeopleUseCase peopleUseCase) {
    return new PeopleViewModel(peopleUseCase);
  }
}
