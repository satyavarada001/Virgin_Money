// Generated by Dagger (https://dagger.dev).
package com.virgin.money.ui.people;

import androidx.lifecycle.MutableLiveData;
import com.virgin.money.data.models.People;
import com.virgin.money.data.states.Result;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import java.util.List;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PeopleViewModel_MembersInjector implements MembersInjector<PeopleViewModel> {
  private final Provider<MutableLiveData<People>> peopleProvider;

  private final Provider<MutableLiveData<Result<List<People>>>> peoplesProvider;

  private final Provider<MutableLiveData<Integer>> loadingVisibilityProvider;

  private final Provider<MutableLiveData<Boolean>> errorProvider;

  public PeopleViewModel_MembersInjector(Provider<MutableLiveData<People>> peopleProvider,
      Provider<MutableLiveData<Result<List<People>>>> peoplesProvider,
      Provider<MutableLiveData<Integer>> loadingVisibilityProvider,
      Provider<MutableLiveData<Boolean>> errorProvider) {
    this.peopleProvider = peopleProvider;
    this.peoplesProvider = peoplesProvider;
    this.loadingVisibilityProvider = loadingVisibilityProvider;
    this.errorProvider = errorProvider;
  }

  public static MembersInjector<PeopleViewModel> create(
      Provider<MutableLiveData<People>> peopleProvider,
      Provider<MutableLiveData<Result<List<People>>>> peoplesProvider,
      Provider<MutableLiveData<Integer>> loadingVisibilityProvider,
      Provider<MutableLiveData<Boolean>> errorProvider) {
    return new PeopleViewModel_MembersInjector(peopleProvider, peoplesProvider, loadingVisibilityProvider, errorProvider);
  }

  @Override
  public void injectMembers(PeopleViewModel instance) {
    injectPeople(instance, peopleProvider.get());
    injectPeoples(instance, peoplesProvider.get());
    injectLoadingVisibility(instance, loadingVisibilityProvider.get());
    injectError(instance, errorProvider.get());
  }

  @InjectedFieldSignature("com.virgin.money.ui.people.PeopleViewModel.people")
  public static void injectPeople(PeopleViewModel instance, MutableLiveData<People> people) {
    instance.people = people;
  }

  @InjectedFieldSignature("com.virgin.money.ui.people.PeopleViewModel.peoples")
  public static void injectPeoples(PeopleViewModel instance,
      MutableLiveData<Result<List<People>>> peoples) {
    instance.peoples = peoples;
  }

  @InjectedFieldSignature("com.virgin.money.ui.people.PeopleViewModel.loadingVisibility")
  public static void injectLoadingVisibility(PeopleViewModel instance,
      MutableLiveData<Integer> loadingVisibility) {
    instance.loadingVisibility = loadingVisibility;
  }

  @InjectedFieldSignature("com.virgin.money.ui.people.PeopleViewModel.error")
  public static void injectError(PeopleViewModel instance, MutableLiveData<Boolean> error) {
    instance.error = error;
  }
}
